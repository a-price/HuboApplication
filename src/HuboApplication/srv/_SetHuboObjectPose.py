"""autogenerated by genpy from HuboApplication/SetHuboObjectPoseRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class SetHuboObjectPoseRequest(genpy.Message):
  _md5sum = "142c7c532e6c99b44bc4ba99cb940958"
  _type = "HuboApplication/SetHuboObjectPoseRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """geometry_msgs/Pose Target
int32 ObjectIndex

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

"""
  __slots__ = ['Target','ObjectIndex']
  _slot_types = ['geometry_msgs/Pose','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Target,ObjectIndex

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetHuboObjectPoseRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.Target is None:
        self.Target = geometry_msgs.msg.Pose()
      if self.ObjectIndex is None:
        self.ObjectIndex = 0
    else:
      self.Target = geometry_msgs.msg.Pose()
      self.ObjectIndex = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_7di.pack(_x.Target.position.x, _x.Target.position.y, _x.Target.position.z, _x.Target.orientation.x, _x.Target.orientation.y, _x.Target.orientation.z, _x.Target.orientation.w, _x.ObjectIndex))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.Target is None:
        self.Target = geometry_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 60
      (_x.Target.position.x, _x.Target.position.y, _x.Target.position.z, _x.Target.orientation.x, _x.Target.orientation.y, _x.Target.orientation.z, _x.Target.orientation.w, _x.ObjectIndex,) = _struct_7di.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_7di.pack(_x.Target.position.x, _x.Target.position.y, _x.Target.position.z, _x.Target.orientation.x, _x.Target.orientation.y, _x.Target.orientation.z, _x.Target.orientation.w, _x.ObjectIndex))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.Target is None:
        self.Target = geometry_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 60
      (_x.Target.position.x, _x.Target.position.y, _x.Target.position.z, _x.Target.orientation.x, _x.Target.orientation.y, _x.Target.orientation.z, _x.Target.orientation.w, _x.ObjectIndex,) = _struct_7di.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_7di = struct.Struct("<7di")
"""autogenerated by genpy from HuboApplication/SetHuboObjectPoseResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SetHuboObjectPoseResponse(genpy.Message):
  _md5sum = "abd997250d7310d216110d082cc17cc0"
  _type = "HuboApplication/SetHuboObjectPoseResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool Success


"""
  __slots__ = ['Success']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Success

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetHuboObjectPoseResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.Success is None:
        self.Success = False
    else:
      self.Success = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_B.pack(self.Success))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 1
      (self.Success,) = _struct_B.unpack(str[start:end])
      self.Success = bool(self.Success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_B.pack(self.Success))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.Success,) = _struct_B.unpack(str[start:end])
      self.Success = bool(self.Success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B = struct.Struct("<B")
class SetHuboObjectPose(object):
  _type          = 'HuboApplication/SetHuboObjectPose'
  _md5sum = '174c4f0aa7997c026dc2a52d35a237fd'
  _request_class  = SetHuboObjectPoseRequest
  _response_class = SetHuboObjectPoseResponse
